name: "vggRigidPoseNet"
layers {
  name: "data"
  type: WINDOW_POSE_DATA
  top: "data"
  top: "label"
  top: "e1"
  top: "e2"
  top: "e3"
  top: "e1coarse"
  top: "e2coarse"
  top: "e3coarse"
  window_data_param {
    source: "/work5/shubhtuls/cachedir/codeRelease/vpsKps/rcnnFinetuneVps/binnedJoint/Train.txt"
    batch_size: 40
    fg_threshold: 0.5
    bg_threshold: 0.5
    fg_fraction: 1.0
    context_pad: 16
    crop_mode: "warp"
    }
  transform_param {
        mirror: true
        crop_size: 224
  }
  include { phase: TRAIN }
}
layers {
  name: "data"
  type: WINDOW_POSE_DATA
  top: "data"
  top: "label"
  top: "e1"
  top: "e2"
  top: "e3"
  top: "e1coarse"
  top: "e2coarse"
  top: "e3coarse"
  window_data_param {
    source: "/work5/shubhtuls/cachedir/codeRelease/vpsKps/rcnnFinetuneVps/binnedJoint/Val.txt"
    batch_size: 40
    fg_threshold: 0.5
    bg_threshold: 0.5
    fg_fraction: 1.0
    context_pad: 16
    crop_mode: "warp"
  }
  transform_param {
        mirror: false
        crop_size: 224
  }
  include { phase: TEST }
}
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm1"
  type: LRN
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "norm1"
  top: "conv2"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm2"
  type: LRN
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "norm2"
  top: "conv3"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}
layers {
  name: "conv4"
  type: CONVOLUTION
  bottom: "conv3"
  top: "conv4"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layers {
  name: "relu4"
  type: RELU
  bottom: "conv4"
  top: "conv4"
}
layers {
  name: "conv5"
  type: CONVOLUTION
  bottom: "conv4"
  top: "conv5"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layers {
  name: "relu5"
  type: RELU
  bottom: "conv5"
  top: "conv5"
}
layers {
  name: "pool5"
  type: POOLING
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "fc8_e1"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc8_e1"
  blobs_lr: 0.1
  blobs_lr: 0.2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 441
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc8_e2"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc8_e2"
  blobs_lr: 0.1
  blobs_lr: 0.2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 441
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc8_e3"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc8_e3"
  blobs_lr: 0.1
  blobs_lr: 0.2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 441
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc8_e1coarse"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc8_e1coarse"
  blobs_lr: 0.1
  blobs_lr: 0.2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 147
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc8_e2coarse"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc8_e2coarse"
  blobs_lr: 0.1
  blobs_lr: 0.2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 147
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc8_e3coarse"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc8_e3coarse"
  blobs_lr: 0.1
  blobs_lr: 0.2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 147
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "pred_e1"
  type: MASK_OUTPUTS
  bottom: "fc8_e1"
  bottom: "label"
  top: "pred_e1"
  mask_outputs_param {
    kernel_size: 21
  }
}
layers {
  name: "pred_e2"
  type: MASK_OUTPUTS
  bottom: "fc8_e2"
  bottom: "label"
  top: "pred_e2"
  mask_outputs_param {
    kernel_size: 21
  }
}
layers {
  name: "pred_e3"
  type: MASK_OUTPUTS
  bottom: "fc8_e3"
  bottom: "label"
  top: "pred_e3"
  mask_outputs_param {
    kernel_size: 21
  }
}
layers {
  name: "pred_e1coarse"
  type: MASK_OUTPUTS
  bottom: "fc8_e1coarse"
  bottom: "label"
  top: "pred_e1coarse"
  mask_outputs_param {
    kernel_size: 7
  }
}
layers {
  name: "pred_e2coarse"
  type: MASK_OUTPUTS
  bottom: "fc8_e2coarse"
  bottom: "label"
  top: "pred_e2coarse"
  mask_outputs_param {
    kernel_size: 7
  }
}
layers {
  name: "pred_e3coarse"
  type: MASK_OUTPUTS
  bottom: "fc8_e3coarse"
  bottom: "label"
  top: "pred_e3coarse"
  mask_outputs_param {
    kernel_size: 7
  }
}
layers {
  name: "loss1"
  type: SOFTMAX_LOSS
  bottom: "pred_e1"
  bottom: "e1"
}
layers {
  name: "loss2"
  type: SOFTMAX_LOSS
  bottom: "pred_e2"
  bottom: "e2"
}
layers {
  name: "loss3"
  type: SOFTMAX_LOSS
  bottom: "pred_e3"
  bottom: "e3"
}
layers {
  name: "loss1c"
  type: SOFTMAX_LOSS
  bottom: "pred_e1coarse"
  bottom: "e1coarse"
}
layers {
  name: "loss2c"
  type: SOFTMAX_LOSS
  bottom: "pred_e2coarse"
  bottom: "e2coarse"
}
layers {
  name: "loss3c"
  type: SOFTMAX_LOSS
  bottom: "pred_e3coarse"
  bottom: "e3coarse"
}
layers {
  name: "accuracy1"
  type: ACCURACY
  bottom: "pred_e1"
  bottom: "e1"
  top: "accuracy1"
  include { phase: TEST }
}
layers {
  name: "accuracy2"
  type: ACCURACY
  bottom: "pred_e2"
  bottom: "e2"
  top: "accuracy2"
  include { phase: TEST }
}
layers {
  name: "accuracy3"
  type: ACCURACY
  bottom: "pred_e3"
  bottom: "e3"
  top: "accuracy3"
  include { phase: TEST }
}
layers {
  name: "accuracy1c"
  type: ACCURACY
  bottom: "pred_e1coarse"
  bottom: "e1coarse"
  top: "accuracy1c"
  include { phase: TEST }
}
layers {
  name: "accuracy2c"
  type: ACCURACY
  bottom: "pred_e2coarse"
  bottom: "e2coarse"
  top: "accuracy2c"
  include { phase: TEST }
}
layers {
  name: "accuracy3c"
  type: ACCURACY
  bottom: "pred_e3coarse"
  bottom: "e3coarse"
  top: "accuracy3c"
  include { phase: TEST }
}
